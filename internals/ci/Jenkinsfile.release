pipeline {
    agent {
        docker {
            image 'saturized/node-aws:node-14'
        }
    }

    libraries {
        lib('squire-library')
    }

    environment {
        HOME = '.home'
        PUBLIC_DATADOG_APP_ID = '78bbb45c-4d86-4ec0-b967-d86e0f602463'
        PUBLIC_DATADOG_TOKEN = 'pubdb7d17e21f41602744729dd9fd152e25'
        PUBLIC_DATADOG_SERVICE = 'tcs-web-services'
        PUBLIC_DATADOG_SAMPLE_RATE = '100'
        PUBLIC_APP_ROOT_ID = 'services-app-root'
        FEDERATED = 'true'
        AWS_REGION = 'us-west-1'
        SLACK_CHANNEL = '#shop-assets-dev'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: "refs/tags/${params.RELEASE_TAG}"]],
                    poll: false,
                    userRemoteConfigs: [[credentialsId: 'f2764581-ecab-48bd-9601-3e87793b852c', url: 'git@bitbucket.org:Dsalvant/tcs-web-services.git']]
                ]

                script {
                    currentBuild.displayName = "${params.RELEASE_TARGET}/${params.RELEASE_TAG}"
                }
            }
        }

        stage('Install packages') {
            environment {
                NPM_TOKEN = credentials('squire-npm-readonly')
            }

            steps {
                sh 'echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ./.npmrc'
                sh 'yarn install --frozen-lockfile'
            }
        }

        stage('Deploy to Staging') {
            when {
                equals expected: 'staging', actual: params.RELEASE_TARGET
            }

            environment {
                AWS_ACCOUNT = '414178295584'
                PUBLIC_API_URL = 'https://api-staging-1.getsquire.com'
                PUBLIC_DEPLOYMENT_ENV = 'staging'
                PUBLIC_DEPLOYMENT_URL = 'https://services-app-staging-1.getsquire.com'
                NODE_ENV = 'production'
            }

            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: '12d34ad4-d93a-47eb-9b4f-403d8fcf98ae', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    withAWS(roleAccount:"${AWS_ACCOUNT}", role:'OrganizationAccountAccessRole') {
                        sh 'yarn build'
                        sh 'yarn deploy'
                    }
                }
            }

            post {
                success {
                    slackSend(channel: "${SLACK_CHANNEL}", color: '#77dd77', message: "SUCCESSFUL: Changes deployed to ${PUBLIC_DEPLOYMENT_URL} | More info on (${env.BUILD_URL})")
                }

                failure {
                    slackSend (channel: "${SLACK_CHANNEL}", color: '#ff6961', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                }
            }
        }

        stage('Deploy to Production') {
            when {
                equals expected: 'production', actual: params.RELEASE_TARGET
            }

            environment {
                AWS_ACCOUNT = '010518657849'
                PUBLIC_API_URL = 'https://api.getsquire.com'
                PUBLIC_DEPLOYMENT_ENV = 'production'
                PUBLIC_DEPLOYMENT_URL = 'https://services-app.getsquire.com'
                NODE_ENV = 'production'
            }

            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: '12d34ad4-d93a-47eb-9b4f-403d8fcf98ae', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    withAWS(roleAccount:"${AWS_ACCOUNT}", role:'OrganizationAccountAccessRole') {
                        sh 'yarn build'
                        sh 'yarn deploy'
                    }
                }
            }

            post {
                success {
                    slackSend(channel: "${SLACK_CHANNEL}", color: '#77dd77', message: "SUCCESSFUL: Changes deployed to ${PUBLIC_DEPLOYMENT_URL} | More info on (${env.BUILD_URL})")
                }

                failure {
                    slackSend (channel: "${SLACK_CHANNEL}", color: '#ff6961', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                }
            }
        }

        stage('Push sourcemaps to Datadog') {
            environment {
                DATADOG_API_KEY = credentials('datadog-api-key')
            }

            steps {
                sh 'yarn upload-sourcemaps-datadog'
            }
        }
    }
}
